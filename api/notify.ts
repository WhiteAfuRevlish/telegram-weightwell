import type { VercelRequest, VercelResponse } from "@vercel/node";

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const CHAT_IDS = (process.env.CHAT_IDS || "").split(",").filter(Boolean);
const SUPABASE_URL = process.env.SUPABASE_URL!;
const SUPABASE_SERVICE_ROLE_KEY =
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE!;

const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

function esc(s: any) {
  const str = (s ?? "").toString();
  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

function money(n: any) {
  const v = Number(n || 0);
  return `${v.toFixed(2)} –≥—Ä–Ω`;
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    // Webhook –≤—ñ–¥ Supabase –¥–æ—Å–∏–ª–∞—î —Ç—ñ–ª–æ —Ñ–æ—Ä–º–∞—Ç—É { type, table, record, schema, ... }
    const { record, table } = (req.body || {}) as {
      table?: string;
      record?: any;
    };

    if (!record || !table) {
      return res.status(400).json({ error: "Bad payload" });
    }

    let message = "";

    if (table === "orders") {
      const {
        id,
        name,
        phone,
        email,
        city,
        address,
        notes,
        total_amount,
        payment_method,
        coupon_code,
        prize_type,
        prize_value,
        discount_amount,
      } = record;

      // 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –ø–æ–∫—É–ø–µ—Ü—å
      message += `üõí <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n`;
      message += `üë§ –Ü–º'—è: <b>${esc(name)}</b>\n`;
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${esc(phone)}</b>\n`;
      if (email) message += `üìß Email: <b>${esc(email)}</b>\n`;
      if (city) message += `üèôÔ∏è –ú—ñ—Å—Ç–æ: <b>${esc(city)}</b>\n`;
      if (address) message += `üè° –ê–¥—Ä–µ—Å–∞ –ù–ü: <b>${esc(address)}</b>\n`;
      message += `üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: ${esc(notes) || "-"}\n`;

      // 2) –ö—É–ø–æ–Ω (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
      if (coupon_code) {
        const prize =
          prize_type === "percent"
            ? `${prize_value}%`
            : prize_type === "amount"
            ? `${prize_value} –≥—Ä–Ω`
            : "‚Äî";
        const disc =
          typeof discount_amount === "number"
            ? money(discount_amount)
            : "‚Äî";
        message += `üè∑Ô∏è –ö—É–ø–æ–Ω: <b>${esc(coupon_code)}</b> (${esc(prize)})\n`;
        message += `üîª –ó–Ω–∏–∂–∫–∞: <b>${esc(disc)}</b>\n`;
      }

      // 3) –¢–æ–≤–∞—Ä–∏
      message += `\nüì¶ –¢–æ–≤–∞—Ä–∏:\n`;

      // –ø—ñ–¥—Ç—è–≥–Ω–µ–º–æ –ø–æ–∑–∏—Ü—ñ—ó
      const resItems = await fetch(
        `${SUPABASE_URL}/rest/v1/order_items?order_id=eq.${encodeURIComponent(
          id
        )}`,
        {
          headers: {
            apikey: SUPABASE_SERVICE_ROLE_KEY!,
            Authorization: `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
            Prefer: "return=representation",
          },
        }
      );

      const items = (await resItems.json()) as Array<{
        product_name: string;
        product_dosage?: string | null;
        quantity: number;
        price?: number | null; // —Ü—ñ–Ω–∞ –∑–∞ 1 —à—Ç, —è–∫—â–æ —î
      }>;

      let itemsSubtotal = 0;
      for (const it of items || []) {
        const line =
          typeof it.price === "number"
            ? it.price * Number(it.quantity || 0)
            : null;
        if (typeof it.price === "number") itemsSubtotal += line!;
        message += `‚Ä¢ ${esc(it.product_name)}${
          it.product_dosage ? ` ${esc(it.product_dosage)} –º–≥` : ""
        } ‚Äî <b>${Number(it.quantity || 0)} —à—Ç.</b>${
          typeof it.price === "number"
            ? ` √ó ${money(it.price)} = <b>${money(line)}</b>`
            : ""
        }\n`;
      }

      // 4) –ü—ñ–¥—Å—É–º–æ–∫
      message += `\nüí≥ –û–ø–ª–∞—Ç–∞: <b>${
        payment_method === "fop" ? "–§–û–ü" : "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂"
      }</b>\n`;
      if (items.length && itemsSubtotal) {
        message += `üßÆ –°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤: <b>${money(itemsSubtotal)}</b>\n`;
      }
      if (coupon_code && typeof discount_amount === "number") {
        message += `üîª –ó–Ω–∏–∂–∫–∞ –∑–∞ –∫—É–ø–æ–Ω–æ–º: <b>${money(discount_amount)}</b>\n`;
      }
      message += `üíµ –†–∞–∑–æ–º –¥–æ —Å–ø–ª–∞—Ç–∏: <b>${money(total_amount)}</b>\n`;
      message += `\n#order_${esc(id)}`;

    } else if (table === "contact_messages") {
      const { name, phone, message: msg } = record;
      message += `üì® <b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏</b>\n`;
      if (name) message += `üë§ –Ü–º'—è: <b>${esc(name)}</b>\n`;
      if (phone) message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${esc(phone)}</b>\n`;
      message += `üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${esc(msg) || "-"}\n`;
    } else {
      // —ñ–Ω—à—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç–∏—Ö–æ
      return res.status(200).json({ skipped: true });
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —É—Å—ñ —á–∞—Ç–∏
    await Promise.all(
      CHAT_IDS.map((chatId) =>
        fetch(TELEGRAM_API, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }),
        })
      )
    );

    return res.status(200).json({ success: true });
  } catch (err) {
    console.error("Telegram Error:", err);
    return res.status(500).json({ error: "Failed to send Telegram message" });
  }
}
